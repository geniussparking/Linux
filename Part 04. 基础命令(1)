Linux文件系统：
	1. 文件名名称严格区分大小写
	2. 文件可以使用除/以外的任意字符
	3. 文件名长度不能超过255个字符
	4. 以.开头的文件为隐藏文件
		. : 当前目录
		.. : 当前目录上一级目录
工作目录： working directory
家目录： home
常用命令：
	pwd: printing working directory, 显示当前工作目录
	cd: change directory
		cd [/PATH/TO/SOMEWHERE]
		cd: 不带参数默认切换回home
			注意：bash中~表示家目录
			cd ~: 切换回自己的家目录
			cd ~USERNAME: 切换到指定用户的家目录
			cd -: 上一个目录和当前目录来回切换
			cd ...: 回到上级目录
			echo $PWD	输出当前工作目录
			echo $OLDPWD  输出上一次的工作目录,两个bash的环境变量，是不断在改变的
			cd $OLDPWD 相当于 cd -
	ls: list 列出指定目录下的内容
		ls [OPTION]... [FILE]...
		ls -a: 列出全部内容，包括隐藏文件
		ls -A: 显示除.和..之外的所有文件
		ls -a /var/: 显示文件夹/var/的内容
		ls -l: --long 长格式列表，即显示文件的详细属性信息
			-rw-r--r--.  1 root root     1441 Nov  9 09:28 initial-setup-ks.cfg
			-：文件类型 -,d,b,c,l,s,p, 都是表示文件类型
			rw-r--r--：三组 
				rw-：左三位表示文件属主的权限, 当前user权限
				r--：中三位表示文件属组的权限, 当前用户所属的组的权限
				r--：右三位表示其他用户（非属主、属组）的权限, 其他应用程序等的权限
			1：数字表示文件被硬链接的次数
			root: 文件的属性
			root: 文件的属组
			1441：数字表示文件的大小，单位是字节
			Nov  9 09:28：文件最后一次被修改的时间
			initial-setup-ks.cfg：文件名
		ls -l -h， --human-readable: 对文件大小换算，非精确		
		ls -lh 选项部分合并写	
		ls -ld : 看文件夹自身的属性，不是这个文件夹里面的内容， ld要结合起来使用
				[root@localhost ~]# ls -ld Music
				drwxr-xr-x. 2 root root 6 Nov 29 06:44 Music
		ls -r: 逆序显示 ls -lr 逆序显示详细信息
		ls -R: recursive 递归显示
	cat: concatenate files and print on the standard output
			连接文件并将文件以标准形式显示出来，是文本文件显示工具，不要用于二进制文件
		[root@localhost /]# file /etc/fstab    查看文件类型
		/etc/fstab: ASCII text
		cat /etc/fstab /etc/issue 同时显示多个文件，连接显示
		cat -n /etc/fstab  输出的文件内容编号
		cat -E /etc/fstab  在每行结尾显示$
	tac: 也是文本文件查看工具，文件内容是逆序（行）显示
	file: 查看文件内容的类型
		大多数选项不怎么使用
	echo:回显
		echo [SHORT-OPTION]... [STRING]...
			-n：不进行换行
				例如：[root@localhost ~]# echo "hello"
						hello
						[root@localhost ~]# echo -n "hello"
						hello[root@localhost ~]#    这里没有换行
			-e: 让转义符生效
			[root@localhost ~]# echo -e "hello \nworld"    换行符\n生效
				hello 
				world
			[root@localhost ~]#
			STRING可以使用引号，单引号和双引号均可用
				单引号：强引用，变量不执行替换，不起作用
				双引号：弱引用，变量会替换
					[root@localhost ~]# echo "$SHELL"
					/bin/bash
					[root@localhost ~]# echo '$SHELL'
					$SHELL
				注意：变量引用的正规符号：${SHELL},但是{}可以省略
	关机或重启命令：
		shutdown
			 shutdown [OPTIONS...] [TIME] [WALL...]
				OPTIONS:
					-h: halt
					-r: restart
					-c: cancel
				TIME:
					now  立刻关机
					hh:mm  几点几分
					+m  几分钟之后
		wall: 发广播给登录系统的其他用户
			wall "i'm gonna shutdown the machine"
		shutdown -h +5  当管理员执行了5分钟后关机命令后，系统会自动wall给所有登录的用户，提醒将会5分钟后关机
		shutdown -c 取消关机
		[root@localhost ~]# shutdown -r +10 "hello, the system is going to restart after 10 minus, thanks a lot."
			可以在shutdown命令后面加上wall的命令
	日期相关命令：
		date:
			显示时间：date [OPTION]... [+FORMAT] 
				[root@localhost ~]# date +%F   后面的+%F是格式化字符串
				2018-01-17
				[root@localhost ~]# date +"%F %T"  注意，这里要用双引号引起来，告诉解释器这里是一个字符串
				2018-01-17 07:22:16
				[root@localhost ~]# date +%s   显示时间戳 unix元年，unix诞生日 1970.01.01 00:00:00
				1516191891
			设置时间：date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]  
				date 080808082015.12  把时间设置成: 2015年8月8日8时8分12秒
		clock/hwclock, 两个命令是一个 hwclock 硬件时钟
			[root@localhost ~]# which clock     查找clock命令在哪里
			/usr/sbin/clock
			[root@localhost ~]# which hwclock
			/usr/sbin/hwclock
			[root@localhost ~]# file /usr/sbin/clock		
			/usr/sbin/clock: symbolic link to `hwclock'		clock是hwclock的一个软链接

			hwclock - query or set the hardware clock (RTC)
			Linux启动后有两套时钟，启动时会从硬件读取时间，启动完了就不再与硬件相关
			date命令看到的是系统时钟
				-s, --hctosys
					Set the System Time from the Hardware Clock.
				-w, --systohc
					Set the Hardware Clock to the current System Time.
		cal: - display a calendar
			cal 2018显示2018年的日历
			cal 10 2018 显示2018年10月的
			cal 01 01 2018 显示2018年1月1日的
	课外作业：
		which - shows the full path of (shell) commands.
		whereis - locate the binary, source, and manual page files for a command
		who - show who is logged on
			-a, --all
				same as -b -d --login -p -r -t -T -u
			-b, --boot
				time of last system boot
		w - Show who is logged on and what they are doing.
			 w [options] user [...]
			 
	如何使用man
		whatis keyword
		man # keyword
			SECTION:
				NAME
				SYNOPSIS:
					[]可省略的内容
					<>必须提供
					|多选一
					{}分组的，不是必须的
					...可以出现多次的
				man快捷键：按h看帮助
					Space 后翻页
					b 前翻页
					Enter 后翻一行
					k 前翻一页
					Ctrl+d 后翻半页
					Ctrl+u 前翻半页
					q 退出
					#G 跳至某行 1G跳至第一行 G跳至最后一行
					/keyword 搜索
					?keyword 搜索
						n 下一个
						N 上一个
	基础命令：
		pwd cd ls echo date clock hwclocl cal cat tac file type tty shutdown reboot halt poweroff

基本命令：
	命令类型：
		命令根据其是否在文件系统上存在一个与之对应的独立文件，可以分为内建命令和外部命令
			外部命令：在系统文件里面都有一个独立文件，理论上说所有命令都是外部命令
			内部命令：外部命令自带很多命令，例如外部命令bash自带了很多命令
			区分内外部命令： type命令，如果提示是builtin就是内部命令
										外部命令显示为命令文件路径
									注意：命令可以有别名，别名可以与原名相同，此时原名被隐藏
									例如：[root@localhost ~]# type ls
										  ls is aliased to `ls --color=auto'
									如果想运行命令本身：\ls，这时候输出的结果是不带颜色的
							查看所有命令别名：alias, 可以自定义命令别名
							自己定义别名：alias NAME='COMMAND', 只对当前shell登录进程有效,如果想永久有效，去改配置文件
							撤销别名：unalias NAME

	which - shows the full path of (shell) commands.显示命令完整路径
		[root@localhost ~]# which which
		alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'      # 默认显示别名
			/usr/bin/alias
			/usr/bin/which

		[root@localhost ~]# which --skip-alias which      # 不显示别名
		/usr/bin/which
	whereis - locate the binary, source, and manual page files for a command
		whereis [options] name
			-b: 搜索二进制
			-m: 搜索手册
			-s: 搜索源文件
	who - show who is logged on
	w - Show who is logged on and what they are doing. 增强版的who命令

bash的基础特性：
	命令历史：shell进程会在其会话中保存此前用户提交执行的命令
		~]# history 能提供从装机到现在所有执行过的历史命令，这些历史记录是保存在文件中的
			history是shell的内嵌命令，是shell的特性
			定制history的功能可以通过环境变量实现
				HISTSIZE: 定义了history命令历史的保存条数，通过echo $HISTSIZE可以查看
				HISTFILE: 持久保存命令历史的文件， 通过echo $HISTFILE获得， 
				[root@localhost ~]# echo $HISTFILE
				/root/.bash_history		进入到root目录后，通过 cat .bash_history可以查看到之前已经保存的历史，本次开机后的命令还保存在内存中，并未写入
			查看history的用法： help history
				history -d 100 删除history的第100条记录
				history -d 100 5 从100条开始删5条
				history -c 清空内存中的历史记录，可以通过-r读回来
						-w	write the current history to the history file and append them to the history list 将当前历史写入文件保存
						-r 	从/root/.bash_history中读到内存中
				history 10 显示最近10条
				!5: 再次执行历史列表中的第5条命令
				!!: 再次执行上一次命令，直接用上方向键就行了
				!STRING: 再一次执行命令历史列表中最近一个以STRING开头的命令
			调用上一条命令的最后一个参数：ESC+.   ESC按一下后可以松开再按.
				例如执行了 ls /root 之后，需要再次是从/root，cd ESC+.就可以达到cd /root的效果
				也可以使用!$，例如：cd !$ 就相当于cd /root，这些快捷键应该会再写bashshell的时候有用
		控制历史文件记录的方式：
			环境变量：HISTCONTROL
				ignoredups: 忽略重复命令
				ignorespace: 忽略以空白字符开头的命令,设置： HISTCONTROL=ignorespace， 然后只要命令以空格开头，系统都不记录
				ignoreboth: 以上两者同时生效
			修改变量的值：
				NAME='VALUE' 仅对当前shell进程有效
		
			命令：which whereis who w alias unalias
			命令历史：history
			文件类型：-,d,b,c,l,p,s

		

Linux基础知识
bash基础特性：
	命令补全：tab键
		shell程序会在接收到用户执行命令的请求，分析完成之后，最左侧的字符串会被当做命令；
		命令查找机制：
			1. 查找内部命令；
			2. 根据PATH环境变量中设定的目录，自左而右逐步搜索目录下的文件名；
		给定的打头字符串，如果能唯一标识某命令程序文件，则直接补全；
		如果不能唯一标识某命令程序文件，再按一次tab键一次，会给出列表；
	路径补全：按tab键也可以，实际上原理不一样；路径补全是根据给定的起始路径补全
	使用补全机制能避免出错
目录管理类的命令：
	mkdir, rmdir
	 mkdir [OPTION]... DIRECTORY...
		-p: 自动按需创建父目录
		-v: 打印创建的内容
		-m MODE: 创建目录时直接给定权限，否则是默认权限
	 rmdir [OPTION]... DIRECTORY... 删除空目录，目录不空不能删除
		-p: 删除某空目录后，其父目录是空，则删除，以此向上递归
		-v: 显示过程
	
	问题1：如何创建/tem/x/y1, /tem/x/y2, /tem/x/y1/a, /tem/x/y1/b 
	问题2：如何创建a_c, a_d, b_c, b_d
	bash的基础特性之：命令行展开
		~: 自动展开为用户的家目录，或指定的用户家目录
		{}: 可承载一个以逗号分隔的路径列表，并将其展开为多个路径
			例如：/tem/{a,b}相当于/tem/a, /tem/b
		mkdir -pv /tem/x/{y1/{a,b},y2} 一个命令可以解决第一个问题,然后tree /tem可以查看， 如果没有tree，则使用yum install tree安装
		mkdir -v {a,b}_{c,d}, 解决第二个问题
	问题3：创建如下目录结构
		/tem/mysysroot/
			bin
			sbin
			etc
				sysconfig
					network-scripts
			usr
				bin
				sbin
				local
					bin
					sbin
					etc
					lib
				lib
				lib64
			var
				cache
				log
				run
		mkdir -pv /tem/mysysroot/{bin,sbin,etc/sysconfig/network-scripts,usr/{bin,sbin,local/{bin,sbin,etc,lib},lib,lib64},var/{cache,log,run}}
	 
	tree命令，以树状结构显示文件层级结构，没有安装的话使用yum install tree
		-L # 指定要显示的层级数
	
bash的基础特性：命令的执行状态结果
	bash通过状态返回值来输出此结果
		成功：0
		失败：1-255
	命令执行完成后，其状态返回值会保存于bash的特殊变量$?中,执行完命令接着使用echo $?即可获得命令执行的返回值
		例如：ls /etc
			   echo $?
引用命令的执行结果：
	$(COMMAND)或`COMMAND`    注意这里不是单引号
	例如：mkdir $(date +%Y%m%d%H%M%S)
bash的引用：
	强引用：''	变量也不会替换
	弱引用：""  变量会替换 
	命令引用：$(COMMAND)或者`COMMAND`
bash的快捷键：
	ctrl+a 跳转至命令行首
	ctrl+e 跳转至命令行尾
	ctrl+u 删除命令行开头到光标之间的所有字符
	ctrl+k 删除光标到末尾的所有字符
	ctrl+l 清屏

文本文件查看类命令：
cat,tac,head,tail,more,less

分屏查看：more less
head:看一个文件的前#行，默认显示10行
	head -n 20 /etc/rc.d/init.d/functions  查看前20行
	或 head -20 /etc/rc.d/init.d/functions
tail: 查看一个文件的后#行，默认10行
	tail -n 20 /etc/rc.d/init.d/functions  查看最后20行
	或 tail -20 /etc/rc.d/init.d/functions
	tail -n 20 -f /etc/rc.d/init.d/functions
		-f：如果被查看的文件是动态增加的，可以实时查看追加的内容，用于查看日志增加很有用；
stat命令
stat - display file or file system status
stat FILE...

文件：两类数据组成
	元数据：metadata  一本书的目录，描述属性，使用stat看到的是文件的元数据
	数据：data		  一本书的正文，使用cat等文本查看工具看到的就是数据
Access: 2018-01-21 12:12:27.075999937 +0800   最近访问时间
Modify: 2017-05-03 18:17:50.000000000 +0800	  数据改变时间，例如增加数据内容
Change: 2017-11-03 06:07:59.815998266 +0800   元数据改变时间，例如改名
touch命令：
 touch - change file timestamps, Update the access and modification times of each FILE to the current time.
-a     change only the access time
-c,    do not create any files
-m     change only the modification time
-t STAMP use [[CC]YY]MMDDhhmm[.ss] instead of current time
例如：
[root@localhost tem]# touch -mt 200001022233.56 functions 
[root@localhost tem]# stat functions 
	Access: 2018-01-21 21:30:12.606008000 +0800   访问时间没有改变
	Modify: 2000-01-02 22:33:56.000000000 +0800	  改变了Modify时间
	Change: 2018-01-21 21:32:44.853006574 +0800   元数据时间就是执行改变Modify时间命令的时间
注：Access和Modify时间的改变，元数据时间Change时间就会改变成执行Access和Modify时间命令的时间

文件管理命令：cp mv rm
cp命令：copy, 复制文件是复制的文件的数据，而不是复制的文件的metedata, 复制的过程：先在目标位置新建一个空文件，然后从源文件抽取数据流，填充到目标文件，这样就完成了复制；元数据不会被复制过来；
cp [OPTION]... [-T] SOURCE DEST  单源文件复制
cp [OPTION]... SOURCE... DIRECTORY  多源文件复制，SOURCE...表示多个源
cp [OPTION]... -t DIRECTORY SOURCE... 多源文件复制的另外一种写法，（多）源文件写在后面

